<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Something to read - team troubleshooting</title><link href="https://something.to-rea.de/" rel="alternate"></link><link href="https://something.to-rea.de/feeds/team-troubleshooting.atom.xml" rel="self"></link><id>https://something.to-rea.de/</id><updated>2020-03-08T00:00:00+00:00</updated><entry><title>Debugging the Delivery of a Team (3/4)</title><link href="https://something.to-rea.de/debugging-the-delivery-of-a-team-34.html" rel="alternate"></link><published>2020-03-08T00:00:00+00:00</published><updated>2020-03-08T00:00:00+00:00</updated><author><name>Cristiano Balducci</name></author><id>tag:something.to-rea.de,2020-03-08:/debugging-the-delivery-of-a-team-34.html</id><summary type="html">&lt;p&gt;Third article in the team troubleshooting serie, where we deal with blocked tasks.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Debugging the Delivery of a Team (3/4)&lt;/h1&gt;
&lt;p&gt;An articles series on troubleshooting a team struggling to ship.&lt;/p&gt;
&lt;h2&gt;Previous episodes&lt;/h2&gt;
&lt;p&gt;In previous blogs we set the &lt;a href="https://something.to-rea.de/debugging-the-delivery-of-a-team-14.html"&gt;context&lt;/a&gt;  (struggling to ship software) and our &lt;a href="https://something.to-rea.de/debugging-the-delivery-of-a-team-24.html"&gt;first steps&lt;/a&gt; into improving it.&lt;/p&gt;
&lt;p&gt;This is where we left our team. After the previous changes in our ways of working, our sprints started to look a bit healthier.. in the first half at least.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Burndown Chart" src="burndown3"&gt;&lt;/p&gt;
&lt;h2&gt;Hitting the wall.&lt;/h2&gt;
&lt;p&gt;The above chart exhibits a common pattern that appears when all the tasks in a sprint are blocked. When this happens, engineers will start to to pull new tasks in the sprint in order to stay utilised. &lt;/p&gt;
&lt;p&gt;While this is done with the best intentions, the net result is that less work gets done! 
The work started at the beginning of the sprint is abandoned, the work started half way trough the sprint will likely not be completed on time.&lt;/p&gt;
&lt;h3&gt;Dealing with dependencies&lt;/h3&gt;
&lt;p&gt;A blocked task is basically a unit of work with unsatisfied dependencies. Now, while it would be great to remove all the dependencies between tasks, reality tells us this is seldom feasible: no software exists in a vacuum, everything we do depends on something else!&lt;/p&gt;
&lt;p&gt;Looking for another way to mitigate this problem, we approached the problem as a timing issue. We decided that the logical thing to do would be to &lt;strong&gt;anticipate&lt;/strong&gt; the blocking task(s), and address them in the sprint before from the blocked task(s). &lt;/p&gt;
&lt;p&gt;While this might all seem quite plain and obvious, you need to remember that we are operating with a "just in time" sprint backlog. To properly manage blocked tasks, we had to be scientific about it.&lt;/p&gt;
&lt;h3&gt;Rolling wave&lt;/h3&gt;
&lt;p&gt;If we want to address blocking tasks in the sprint &lt;strong&gt;before&lt;/strong&gt; the blocked tasks, we obviously need to have an horizon of at least two sprints. 
To achieve this we changed our "just in time" backlog creation process to address the next-next sprint (we call it the &lt;em&gt;horizon&lt;/em&gt; sprint) instead of the next sprint.&lt;/p&gt;
&lt;p&gt;This enabled us to anticipate and address blockers in enough time. If any task in the &lt;em&gt;horizon&lt;/em&gt; backlog blocks another, we could move it to the &lt;em&gt;next&lt;/em&gt; sprint and solve it before it became a problem.&lt;/p&gt;
&lt;p&gt;The concept behind this is called &lt;em&gt;rolling wave planning&lt;/em&gt;, and is used in project management to do adaptive planning for project milestones.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Rolling Wave drawing" src="https://something.to-rea.de/images/rollingwave.jpg"&gt;&lt;/p&gt;
&lt;p&gt;In order to address the blockers, we need to &lt;strong&gt;find&lt;/strong&gt; them first. To make it easier, we made it explicit that, when creating the backlog, it was also required to create a graph describing the blocking/blocker relationships in the sprint. &lt;/p&gt;
&lt;p&gt;The result looks something like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Dependencies graph" src="https://something.to-rea.de/images/dependencies.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A note on iteration length&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One thing you probably noticed is that we moved to a sprint length of two weeks. This was done in the spirit of removing a bit of tension from the system: longer iterations are more forgiving than short one.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Where we landed&lt;/h3&gt;
&lt;p&gt;As with most of the systems, solving a problem will surface another and the further you go in optimising them, the harder the problems become.&lt;/p&gt;
&lt;p&gt;![Burndown Chart][burdown5]&lt;/p&gt;
&lt;p&gt;Good, but still not good enough.. in the next blog we will iterate once more and tweak the team a bit more. &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Disclaimer&lt;/h4&gt;
&lt;p&gt;I know that burndown charts have a bad reputation and I don't want to suggest that they are the be-all end-all of team efficiency. I do think they are a useful metric that can be used to explore how much a team is able to focus and understands its own capacity.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This content is based on a &lt;a href="https://medium.com/@SkyscannerEng/dont-burn-out-burn-down-how-we-learned-to-sprint-on-shifting-sands-a67341c34fa8"&gt;previous article&lt;/a&gt; published on October 2, 2019.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="team troubleshooting"></category><category term="agile"></category><category term="team delivery"></category><category term="process debugging"></category><category term="burndown"></category></entry><entry><title>Debugging the Delivery of a Team (2/4)</title><link href="https://something.to-rea.de/debugging-the-delivery-of-a-team-24.html" rel="alternate"></link><published>2020-02-26T00:00:00+00:00</published><updated>2020-02-26T00:00:00+00:00</updated><author><name>Cristiano Balducci</name></author><id>tag:something.to-rea.de,2020-02-26:/debugging-the-delivery-of-a-team-24.html</id><summary type="html">&lt;p&gt;Second article in the team troubleshooting serie, where we identify and solve the first limiting factor.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Debugging the Delivery of a Team (2/4)&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;An articles series on troubleshooting a team struggling to ship.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Previous episodes&lt;/h2&gt;
&lt;p&gt;In the previous &lt;a href="https://something.to-rea.de/debugging-the-delivery-of-a-team-14.html"&gt;blog&lt;/a&gt; we introduced the problem. We have a team, working with scrum, that is going through the movements but struggling to ship software.&lt;/p&gt;
&lt;p&gt;Now we will look into our first troubleshooting iterations. As all the articles in this series, it starts with a graph.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Burndown chart" src="https://something.to-rea.de/images/burndown1.png"&gt;&lt;/p&gt;
&lt;h2&gt;Flat line&lt;/h2&gt;
&lt;p&gt;This was what our burn down chart looked like. We were flatlining —  we were working hard, and yet failing to complete most (any?) of the tasks that we were supposed to do, not delivering value at the end of the sprint. But &lt;strong&gt;why&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;Taking a look at our process, one issue was standing out: our sprint planning sessions were taking way too long!
We tended to address both goal setting and task-estimating in a single session. As a result, planning sessions were gruelling, lasting up to 2-3 hours. After a while, planning fatigue would set in, we would run out of the mental energy required to discuss the tasks in front of us, and end up committing to work we did not fully understand. The result we ended up with was a series of vaguely defined and somewhat decontextualised tasks, and a sprint goal which felt unachievable.&lt;/p&gt;
&lt;p&gt;How to we tackle this?&lt;/p&gt;
&lt;h3&gt;The Woes of Not Having a Backlog&lt;/h3&gt;
&lt;p&gt;Because of reasons tied to the specifics of our project, having an healthy backlog maintained by the Product Owner was a no-go for us. We had to find a different solution.&lt;/p&gt;
&lt;p&gt;After various experiments, we settled on a set-up where the Product Owner, me and the senior engineer in the team would get together early during the current sprint and specify the sprint goal for the next sprint. In the sprint, we would allocate some work to create the next sprint backlog. Something like a Just in Time backlog.&lt;/p&gt;
&lt;p&gt;By decoupling the process of setting the sprint goal (the ‘what’) from the work of planning the sprint (the ‘how’) we create the condition for better planning. Our sprint planning ceremony ended up  taking much less time and the tasks created through the planning process were fully contextualised.&lt;/p&gt;
&lt;p&gt;This landed us to the somewhat healthier delivery pattern that you can see here.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Burndown chart" src="https://something.to-rea.de/images/burndown3.png"&gt;&lt;/p&gt;
&lt;p&gt;The observant reader will notice that we still ended up not delivering. As a matter of fact, despite being &lt;em&gt;healthier&lt;/em&gt;, is anything but &lt;em&gt;healthy&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;In the next article we will see why, and how we adapted. Again.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Disclaimer&lt;/h4&gt;
&lt;p&gt;I know that burndown charts have a bad reputation and I don't want to suggest that they are the be-all end-all of team efficiency. I do think they are a useful metric that can be used to explore how much a team is able to focus and understands its own capacity.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This content is based on a &lt;a href="https://medium.com/@SkyscannerEng/dont-burn-out-burn-down-how-we-learned-to-sprint-on-shifting-sands-a67341c34fa8"&gt;previous article&lt;/a&gt; published on October 2, 2019.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="team troubleshooting"></category><category term="agile"></category><category term="team delivery"></category><category term="process debugging"></category><category term="burndown"></category></entry><entry><title>Debugging the Delivery of a Team (1/4)</title><link href="https://something.to-rea.de/debugging-the-delivery-of-a-team-14.html" rel="alternate"></link><published>2020-02-25T00:00:00+00:00</published><updated>2020-02-25T00:00:00+00:00</updated><author><name>Cristiano Balducci</name></author><id>tag:something.to-rea.de,2020-02-25:/debugging-the-delivery-of-a-team-14.html</id><summary type="html">&lt;p&gt;First article in the Team Troubleshooting serie. Where we set the scene for the following blogs.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Debugging the Delivery of a Team (1/4)&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;An articles series on troubleshooting a team struggling to ship.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Falling in line&lt;/h2&gt;
&lt;p&gt;Starting as a manager in a new team is a multi faced challenge. You need to understand many things, how to interact with the team members, what the team norms are, what their technical context here and many more. When talking about a small software team,&lt;/p&gt;
&lt;p&gt;I feel that the most important one is &lt;em&gt;getting in the team's cadence&lt;/em&gt;. By this I mean to get in the same rhythm of analysing/producing/shipping working software products, to look at work using the same time horizon.
This allows you to frame milestones, challenges and problems in the right way. A team that ships weekly has a different outlook on future work than one that ships monthly!&lt;/p&gt;
&lt;p&gt;Sometimes what happens is that you join a team where the cadence is just not there. You have all the ceremonies at the right time, you have iterations of constant length but the rhythm of delivery escapes you. It is because you are not &lt;em&gt;regularly shipping working software&lt;/em&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This was exactly the situation me and my new team faced some months ago. A team set up in a quite normal way: some software engineers, a manager and a Product Owner, working using Scrum with 1 week sprints. An average team: working hard but struggling to ship, pouring ourselves in our daily work and have nothing to show for it.&lt;/p&gt;
&lt;p&gt;And this is the story of how we troubleshoot the problem and, step by step, seen through the lens of burndown charts. The story of how we went from this&lt;/p&gt;
&lt;p&gt;&lt;img alt="Burndown Chart" src="https://something.to-rea.de/images/burndown1.png"&gt;&lt;/p&gt;
&lt;p&gt;to this&lt;/p&gt;
&lt;p&gt;&lt;img alt="Burndown Chart" src="https://something.to-rea.de/images/burndown2.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;In the next post we will see what was causing the flat line pattern that you see in the first image. Spoiler: it is not what you think it is ;)&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Disclaimer&lt;/h4&gt;
&lt;p&gt;I know that burndown charts have a bad reputation and I don't want to suggest that they are the be-all end-all of team efficiency. I do think they are a useful metric that can be used to explore how much a team is able to focus and understands its own capacity.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This conotent is based on a &lt;a href="https://medium.com/@SkyscannerEng/dont-burn-out-burn-down-how-we-learned-to-sprint-on-shifting-sands-a67341c34fa8"&gt;previous article&lt;/a&gt; published on October 2, 2019.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="team troubleshooting"></category><category term="agile"></category><category term="team delivery"></category><category term="process debugging"></category><category term="burndown"></category></entry></feed>