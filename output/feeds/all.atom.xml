<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Something to read</title><link href="https://cbalducci.github.io/writings.to-rea.de/" rel="alternate"></link><link href="https://cbalducci.github.io/writings.to-rea.de/feeds/all.atom.xml" rel="self"></link><id>https://cbalducci.github.io/writings.to-rea.de/</id><updated>2020-02-26T00:00:00+00:00</updated><entry><title>Debugging the Delivery of a Team (2/4)</title><link href="https://cbalducci.github.io/writings.to-rea.de/debugging-the-delivery-of-a-team-24.html" rel="alternate"></link><published>2020-02-26T00:00:00+00:00</published><updated>2020-02-26T00:00:00+00:00</updated><author><name>Cristiano Balducci</name></author><id>tag:cbalducci.github.io,2020-02-26:/writings.to-rea.de/debugging-the-delivery-of-a-team-24.html</id><summary type="html">&lt;p&gt;Second article in the team troubleshooting serie, where we identify and solve the first limiting factor.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Debugging the Delivery of a Team (2/4)&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;An articles series on troubleshooting a team struggling to ship.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Previous episodes&lt;/h2&gt;
&lt;p&gt;In the previous &lt;a href="https://medium.com/@cbldc_/debugging-the-delivery-of-a-team-1-of-4-49a280c82785"&gt;blog&lt;/a&gt; we introduced the problem. We have a team, working with scrum, that is going through the movements but struggling to ship software.&lt;/p&gt;
&lt;p&gt;Now we will look into our first troubleshooting iterations. As all the articles in this series, it starts with a graph.&lt;/p&gt;
&lt;h2&gt;Flat line&lt;/h2&gt;
&lt;p&gt;This was what our burn down chart looked like. We were flatlining —  we were working hard, and yet failing to complete most (any?) of the tasks that we were supposed to do, not delivering value at the end of the sprint. But &lt;strong&gt;why&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;Taking a look at our process, one issue was standing out: our sprint planning sessions were taking way too long!
We tended to address both goal setting and task-estimating in a single session. As a result, planning sessions were gruelling, lasting up to 2-3 hours. After a while, planning fatigue would set in, we would run out of the mental energy required to discuss the tasks in front of us, and end up committing to work we did not fully understand. The result we ended up with was a series of vaguely defined and somewhat decontextualised tasks, and a sprint goal which felt unachievable.&lt;/p&gt;
&lt;p&gt;How to we tackle this?&lt;/p&gt;
&lt;h3&gt;The Woes of Not Having a Backlog&lt;/h3&gt;
&lt;p&gt;Because of reasons tied to the specifics of our project, having an healthy backlog maintained by the Product Owner was a no-go for us. We had to find a different solution.&lt;/p&gt;
&lt;p&gt;After various experiments, we settled on a set-up where the Product Owner, me and the senior engineer in the team would get together early during the current sprint and specify the sprint goal for the next sprint. In the sprint, we would allocate some work to create the next sprint backlog. Something like a Just in Time backlog.&lt;/p&gt;
&lt;p&gt;By decoupling the process of setting the sprint goal (the ‘what’) from the work of planning the sprint (the ‘how’) we create the condition for better planning. Our sprint planning ceremony ended up  taking much less time and the tasks created through the planning process were fully contextualised.&lt;/p&gt;
&lt;p&gt;This landed us to the somewhat healthier delivery pattern that you can see here.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Burndown chart" src="https://cbalducci.github.io/writings.to-rea.de/images/burndown3.png"&gt;&lt;/p&gt;
&lt;p&gt;The observant reader will notice that we still ended up not delivering. As a matter of fact, despite being &lt;em&gt;healthier&lt;/em&gt;, is anything but &lt;em&gt;healthy&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;In the next article we will see why, and how we adapted. Again.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Disclaimer&lt;/h4&gt;
&lt;p&gt;I know that burndown charts have a bad reputation and I don't want to suggest that they are the be-all end-all of team efficiency. I do think they are a useful metric that can be used to explore how much a team is able to focus and understands its own capacity.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This content is based on a &lt;a href="https://medium.com/@SkyscannerEng/dont-burn-out-burn-down-how-we-learned-to-sprint-on-shifting-sands-a67341c34fa8"&gt;previous article&lt;/a&gt; published on October 2, 2019.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="team troubleshooting"></category><category term="agile"></category><category term="team delivery"></category><category term="process debugging"></category><category term="burndown"></category></entry><entry><title>Debugging the Delivery of a Team (1/4)</title><link href="https://cbalducci.github.io/writings.to-rea.de/debugging-the-delivery-of-a-team-14.html" rel="alternate"></link><published>2020-02-25T00:00:00+00:00</published><updated>2020-02-25T00:00:00+00:00</updated><author><name>Cristiano Balducci</name></author><id>tag:cbalducci.github.io,2020-02-25:/writings.to-rea.de/debugging-the-delivery-of-a-team-14.html</id><summary type="html">&lt;p&gt;First article in the Team Troubleshooting serie. Where we set the scene for the following blogs.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Debugging the Delivery of a Team (1/4)&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;An articles series on troubleshooting a team struggling to ship.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Falling in line&lt;/h2&gt;
&lt;p&gt;Starting as a manager in a new team is a multi faced challenge. You need to understand many things, how to interact with the team members, what the team norms are, what their technical context here and many more. When talking about a small software team,&lt;/p&gt;
&lt;p&gt;I feel that the most important one is &lt;em&gt;getting in the team's cadence&lt;/em&gt;. By this I mean to get in the same rhythm of analysing/producing/shipping working software products, to look at work using the same time horizon.
This allows you to frame milestones, challenges and problems in the right way. A team that ships weekly has a different outlook on future work than one that ships monthly!&lt;/p&gt;
&lt;p&gt;Sometimes what happens is that you join a team where the cadence is just not there. You have all the ceremonies at the right time, you have iterations of constant length but the rhythm of delivery escapes you. It is because you are not &lt;em&gt;regularly shipping working software&lt;/em&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This was exactly the situation me and my new team faced some months ago. A team set up in a quite normal way: some software engineers, a manager and a Product Owner, working using Scrum with 1 week sprints. An average team: working hard but struggling to ship, pouring ourselves in our daily work and have nothing to show for it.&lt;/p&gt;
&lt;p&gt;And this is the story of how we troubleshoot the problem and, step by step, seen through the lens of burndown charts. The story of how we went from this&lt;/p&gt;
&lt;p&gt;&lt;img alt="Burndown Chart" src="https://cbalducci.github.io/writings.to-rea.de/images/burndown1.png"&gt;&lt;/p&gt;
&lt;p&gt;to this&lt;/p&gt;
&lt;p&gt;&lt;img alt="Burndown Chart" src="https://cbalducci.github.io/writings.to-rea.de/images/burndown2.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;In the next post we will see what was causing the flat line pattern that you see in the first image. Spoiler: it is not what you think it is ;)&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Disclaimer&lt;/h4&gt;
&lt;p&gt;I know that burndown charts have a bad reputation and I don't want to suggest that they are the be-all end-all of team efficiency. I do think they are a useful metric that can be used to explore how much a team is able to focus and understands its own capacity.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This conotent is based on a &lt;a href="https://medium.com/@SkyscannerEng/dont-burn-out-burn-down-how-we-learned-to-sprint-on-shifting-sands-a67341c34fa8"&gt;previous article&lt;/a&gt; published on October 2, 2019.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="team troubleshooting"></category><category term="agile"></category><category term="team delivery"></category><category term="process debugging"></category><category term="burndown"></category></entry></feed>