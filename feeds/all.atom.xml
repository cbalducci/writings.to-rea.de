<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Something to read</title><link href="https://something.to-rea.de/" rel="alternate"></link><link href="https://something.to-rea.de/feeds/all.atom.xml" rel="self"></link><id>https://something.to-rea.de/</id><updated>2020-03-08T00:00:00+00:00</updated><entry><title>Debugging the Delivery of a Team (3/4)</title><link href="https://something.to-rea.de/debugging-the-delivery-of-a-team-34.html" rel="alternate"></link><published>2020-03-08T00:00:00+00:00</published><updated>2020-03-08T00:00:00+00:00</updated><author><name>Cristiano Balducci</name></author><id>tag:something.to-rea.de,2020-03-08:/debugging-the-delivery-of-a-team-34.html</id><summary type="html">&lt;p&gt;Third article in the team troubleshooting serie, where we deal with blocked tasks.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Debugging the Delivery of a Team (3/4)&lt;/h1&gt;
&lt;p&gt;An articles series on troubleshooting a team struggling to ship.&lt;/p&gt;
&lt;h2&gt;Previous episodes&lt;/h2&gt;
&lt;p&gt;In previous blogs we set the &lt;a href="https://something.to-rea.de/debugging-the-delivery-of-a-team-14.html"&gt;context&lt;/a&gt;  (struggling to ship software) and our &lt;a href="https://something.to-rea.de/debugging-the-delivery-of-a-team-24.html"&gt;first steps&lt;/a&gt; into improving it.&lt;/p&gt;
&lt;p&gt;This is where we left our team. After the previous changes in our ways of working, our sprints started to look a bit healthier.. in the first half at least.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Burndown Chart" src="https://something.to-rea.de/images/burndown3.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A note on iteration length&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One thing you probably noticed is that we moved to a sprint length of two weeks. This was done in the spirit of removing a bit of tension from the system: longer iterations are more forgiving than short one.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Hitting the wall.&lt;/h2&gt;
&lt;p&gt;The above chart exhibits a common pattern that appears when all the tasks in a sprint are blocked. When this happens, engineers will start to to pull new tasks in the sprint in order to stay utilised. &lt;/p&gt;
&lt;p&gt;While this is done with the best intentions, the net result is that less work gets done! 
The work started at the beginning of the sprint is abandoned, the work started half way trough the sprint will likely not be completed on time.&lt;/p&gt;
&lt;h3&gt;Dealing with dependencies&lt;/h3&gt;
&lt;p&gt;A blocked task is basically a unit of work with unsatisfied dependencies. Now, while it would be great to remove all the dependencies between tasks, reality tells us this is seldom feasible: no software exists in a vacuum, everything we do depends on something else!&lt;/p&gt;
&lt;p&gt;Looking for another way to mitigate this problem, we approached the problem as a timing issue. We decided that the logical thing to do would be to &lt;strong&gt;anticipate&lt;/strong&gt; the blocking task(s), and address them in the sprint before from the blocked task(s). &lt;/p&gt;
&lt;p&gt;While this might all seem quite plain and obvious, you need to remember that we are operating with a "just in time" sprint backlog. To properly manage blocked tasks, we had to be scientific about it.&lt;/p&gt;
&lt;h3&gt;Rolling wave&lt;/h3&gt;
&lt;p&gt;If we want to address blocking tasks in the sprint &lt;strong&gt;before&lt;/strong&gt; the blocked tasks, we obviously need to have an horizon of at least two sprints. 
To achieve this we changed our "just in time" backlog creation process to address the next-next sprint (we call it the &lt;em&gt;horizon&lt;/em&gt; sprint) instead of the next sprint.&lt;/p&gt;
&lt;p&gt;This enabled us to anticipate and address blockers in enough time. If any task in the &lt;em&gt;horizon&lt;/em&gt; backlog blocks another, we could move it to the &lt;em&gt;next&lt;/em&gt; sprint and solve it before it became a problem.&lt;/p&gt;
&lt;p&gt;The concept behind this is called &lt;em&gt;rolling wave planning&lt;/em&gt;, and is used in project management to do adaptive planning for project milestones.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Rolling Wave drawing" src="https://something.to-rea.de/images/rollingwave.jpg"&gt;&lt;/p&gt;
&lt;p&gt;In order to address the blockers, we need to &lt;strong&gt;find&lt;/strong&gt; them first. To make it easier, we made it explicit that, when creating the backlog, it was also required to create a graph describing the blocking/blocker relationships in the sprint. &lt;/p&gt;
&lt;p&gt;The result looks something like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Dependencies graph" src="https://something.to-rea.de/images/dependencies.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Where we landed&lt;/h3&gt;
&lt;p&gt;As with most of the systems, solving a problem will surface another and the further you go in optimising them, the harder the problems become.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Burndown Chart" src="https://something.to-rea.de/images/burndown5.png"&gt;&lt;/p&gt;
&lt;p&gt;Good, but still not good enough.. in the next blog we will iterate once more and tweak the team a bit more. &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Disclaimer&lt;/h4&gt;
&lt;p&gt;I know that burndown charts have a bad reputation and I don't want to suggest that they are the be-all end-all of team efficiency. I do think they are a useful metric that can be used to explore how much a team is able to focus and understands its own capacity.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This content is based on a &lt;a href="https://medium.com/@SkyscannerEng/dont-burn-out-burn-down-how-we-learned-to-sprint-on-shifting-sands-a67341c34fa8"&gt;previous article&lt;/a&gt; published on October 2, 2019.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="team troubleshooting"></category><category term="agile"></category><category term="team delivery"></category><category term="process debugging"></category><category term="burndown"></category></entry><entry><title>How to survive your own Performance Review (as a manager).</title><link href="https://something.to-rea.de/how-to-survive-your-own-performance-review-as-a-manager.html" rel="alternate"></link><published>2020-03-03T00:00:00+00:00</published><updated>2020-03-03T00:00:00+00:00</updated><author><name>Cristiano Balducci</name></author><id>tag:something.to-rea.de,2020-03-03:/how-to-survive-your-own-performance-review-as-a-manager.html</id><summary type="html">&lt;p&gt;Adapting your ways of working to make your Performance Review less stressful.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;How do you survive your own Performance Review as a manager?&lt;/h1&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;Last year I have been struggling with work-related stress, Performance Reviews being the apex of stress inducing events. After an almost break-down towards end of the year, I decided that I had to fix it.&lt;/p&gt;
&lt;h2&gt;Shift of focus.&lt;/h2&gt;
&lt;p&gt;At the end of 2018, I took a job at a new company where, for the first time in my career, I would be managing a team without being the technical lead. This novel condition created the space for me to focus much more on management, where I have grown a lot. It also made my life miserable when I started thinking about measuring my own performances.&lt;/p&gt;
&lt;p&gt;In my new workplace, as in many other companies in the industry, individual performances are assessed in 6 months cycles via a mix of self-evaluation, team feedback and manager input.
These data sources are then used to answer a core question: &lt;em&gt;"What was the impact of this person in the company?"&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Measuring impact as a manager.&lt;/h3&gt;
&lt;p&gt;While this lens makes it much easier to have performance conversations with engineers, applying it to managers is much more difficult.&lt;/p&gt;
&lt;p&gt;Evaluating impact as a manager is a tricky proposition. Do you consider your team's impact as yours? How can you split between what the team would have achieved without you and what you enabled the team to achieve? You are not the one writing the code, after all..
And what about the team members? Am I striking the right balance between supporting them and challenging them? Are they growing thanks to my work or despite my work? Is there something I should be doing for them that I am not doing enough of or at all?&lt;/p&gt;
&lt;p&gt;These were the kind of questions I was asking myself, sadly realising I had no real answers. The more I thought about it, the more I felt I was failing at my job. The more I felt like a failure, the less I was able to focus on work. The less I was able to focus, the less I achieved. The less I achieved, the less impact I had. The less impact I had, the more I felt I was failing at my job.&lt;/p&gt;
&lt;p&gt;It was a terrible downward spiral, it took an heavy toll on my work life and, after a while, started to take a hold of my life outside work as well.
I was extremely lucky that the people in my personal life were supporting and understanding. They helped me realise what was happening and pushed me to find a solution, instead of wallowing in self pity.&lt;/p&gt;
&lt;h2&gt;Mitigation strategy.&lt;/h2&gt;
&lt;p&gt;Looking back at the questions that triggered my self-doubt spiral, we can broadly split them into measuring &lt;em&gt;direct impact&lt;/em&gt; (What have you achieved?) and measuring &lt;em&gt;indirect impact&lt;/em&gt; (What is your effect on the team?). Since the best way to fight back self-doubt is hard-data, I set off to gather as much as possible on these two topics.&lt;/p&gt;
&lt;h3&gt;What have you achieved?&lt;/h3&gt;
&lt;p&gt;My first action was to start write down my achievements regularly. At the beginning it felt extremely awkward (no one like to brag!) but, as time went by it became more and more natural. The focusing question I use to start the thought process is "How have you been serving the team or the wider organisation this week?". I then write it down using a slightly tuned version of the STAR model:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Situation&lt;/strong&gt;: What was the context you were operating in?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Task&lt;/strong&gt;: What would be expected of you in this context?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Action&lt;/strong&gt;: How did you act? What did you do?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Result&lt;/strong&gt;: What was the net outcome of your actions? How is the context changed for the better now?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Supporting Evidence&lt;/strong&gt;: Is there any substantial deliverable that you can show? (E.G. a document, a roadmap, working software)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The simple fact of writing the achievements forced me to frame my impact in a much more tangible way. It was also extremely useful in compensating for the recency bias, the tendency that we have of giving much more weight to recent events (and achievements!) than past ones.&lt;/p&gt;
&lt;h3&gt;What is your effect on the team?&lt;/h3&gt;
&lt;p&gt;The achievement tracking takes care of the &lt;em&gt;direct impact&lt;/em&gt; but what about the &lt;em&gt;indirect impact&lt;/em&gt;? I found out the best source of information on this to be feedback. The problem then becomes: how do we encourage feedback to happen organically in the team?&lt;/p&gt;
&lt;p&gt;To influence this I started by leading by example, I make a conscious effort to give direct feedback to my team members often and in a structured way. No matter when or how I do it, I always make sure to be explicit that feedback is happening. This is as simple as starting the conversation by asking "I would like to give you some feedback on X, is this a good moment?". Another device I have started using, on suggestion from my manager, is to ask this questions during 1:1s : "Who do you think is doing a great job in the team? Have you told them?".&lt;/p&gt;
&lt;p&gt;In the long term, all these small things have the effect of making giving direct feedback common place in the team. Success!&lt;/p&gt;
&lt;p&gt;I also use anonymous surveys to gather feedback on specific topics but I would caution not to overdo this. Giving effective and structured feedback is a time consuming activity. If you send everyone in your team a 20 question survey weekly, they &lt;strong&gt;will&lt;/strong&gt; stop answering. Feedback fatigue is real!&lt;/p&gt;
&lt;h3&gt;Regular performances check-in.&lt;/h3&gt;
&lt;p&gt;Finally, I have introduced a monthly touch point with my manager, where we discuss my performances. In this meetings I briefly present my achievements together with the collated feedback and then we discuss them. Having this conversation is extremely valuable to keep a good perspective on your track but, to be effective, it requires two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Psychological safety: you need to have enough of it to be comfortable talking about your mistakes or any negative feedback you have received. If you are not comfortable discuss these topics with your manager, you can have these Performance check-ins with a mentor or a peer.&lt;/li&gt;
&lt;li&gt;Two way commitment: your manager (or mentor or selected peer) needs to be committed to the process as much as you are. If there is no critical counterpart to your data, the whole thing risks of becoming a self-congratulatory ritual devoid of any learning opportunities.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;In the end..&lt;/h2&gt;
&lt;p&gt;After I have started these practices, I feel much more positive on the value I bring in my team. I am also much less worried about discovering too late that I am neglecting some aspects of supporting my team, since I am confident that they will be raised early enough to give me time to correct course.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;"If it hurts, do it more often and bring the pain forward"&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Sources and Additional Resources&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;"Managing up!" podcast&lt;ul&gt;
&lt;li&gt;&lt;a href="https://managingup.simplecast.com/episodes/050e2cca"&gt;Priorities, Impact and Wrangling the "Manager's Calendar".&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://managingup.simplecast.com/episodes/the-invisible-work-of-management"&gt;The Invisible Work of Management.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.goodreads.com/book/show/39313439-radical-candor"&gt;"Radical Candor"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.goodreads.com/book/show/14062004-thinking-fast-and-slow"&gt;"Thinking, Fast and Slow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.goodreads.com/book/show/21413978-giving-effective-feedback"&gt;"HBR - Giving Effective Feedback&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="management"></category><category term="management"></category><category term="performance review"></category><category term="mental health"></category></entry><entry><title>Debugging the Delivery of a Team (2/4)</title><link href="https://something.to-rea.de/debugging-the-delivery-of-a-team-24.html" rel="alternate"></link><published>2020-02-26T00:00:00+00:00</published><updated>2020-02-26T00:00:00+00:00</updated><author><name>Cristiano Balducci</name></author><id>tag:something.to-rea.de,2020-02-26:/debugging-the-delivery-of-a-team-24.html</id><summary type="html">&lt;p&gt;Second article in the team troubleshooting serie, where we identify and solve the first limiting factor.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Debugging the Delivery of a Team (2/4)&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;An articles series on troubleshooting a team struggling to ship.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Previous episodes&lt;/h2&gt;
&lt;p&gt;In the previous &lt;a href="https://something.to-rea.de/debugging-the-delivery-of-a-team-14.html"&gt;blog&lt;/a&gt; we introduced the problem. We have a team, working with scrum, that is going through the movements but struggling to ship software.&lt;/p&gt;
&lt;p&gt;Now we will look into our first troubleshooting iterations. As all the articles in this series, it starts with a graph.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Burndown chart" src="https://something.to-rea.de/images/burndown1.png"&gt;&lt;/p&gt;
&lt;h2&gt;Flat line&lt;/h2&gt;
&lt;p&gt;This was what our burn down chart looked like. We were flatlining —  we were working hard, and yet failing to complete most (any?) of the tasks that we were supposed to do, not delivering value at the end of the sprint. But &lt;strong&gt;why&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;Taking a look at our process, one issue was standing out: our sprint planning sessions were taking way too long!
We tended to address both goal setting and task-estimating in a single session. As a result, planning sessions were gruelling, lasting up to 2-3 hours. After a while, planning fatigue would set in, we would run out of the mental energy required to discuss the tasks in front of us, and end up committing to work we did not fully understand. The result we ended up with was a series of vaguely defined and somewhat decontextualised tasks, and a sprint goal which felt unachievable.&lt;/p&gt;
&lt;p&gt;How to we tackle this?&lt;/p&gt;
&lt;h3&gt;The Woes of Not Having a Backlog&lt;/h3&gt;
&lt;p&gt;Because of reasons tied to the specifics of our project, having an healthy backlog maintained by the Product Owner was a no-go for us. We had to find a different solution.&lt;/p&gt;
&lt;p&gt;After various experiments, we settled on a set-up where the Product Owner, me and the senior engineer in the team would get together early during the current sprint and specify the sprint goal for the next sprint. In the sprint, we would allocate some work to create the next sprint backlog. Something like a Just in Time backlog.&lt;/p&gt;
&lt;p&gt;By decoupling the process of setting the sprint goal (the ‘what’) from the work of planning the sprint (the ‘how’) we create the condition for better planning. Our sprint planning ceremony ended up  taking much less time and the tasks created through the planning process were fully contextualised.&lt;/p&gt;
&lt;p&gt;This landed us to the somewhat healthier delivery pattern that you can see here.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Burndown chart" src="https://something.to-rea.de/images/burndown3.png"&gt;&lt;/p&gt;
&lt;p&gt;The observant reader will notice that we still ended up not delivering. As a matter of fact, despite being &lt;em&gt;healthier&lt;/em&gt;, is anything but &lt;em&gt;healthy&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;In the next article we will see why, and how we adapted. Again.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Disclaimer&lt;/h4&gt;
&lt;p&gt;I know that burndown charts have a bad reputation and I don't want to suggest that they are the be-all end-all of team efficiency. I do think they are a useful metric that can be used to explore how much a team is able to focus and understands its own capacity.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This content is based on a &lt;a href="https://medium.com/@SkyscannerEng/dont-burn-out-burn-down-how-we-learned-to-sprint-on-shifting-sands-a67341c34fa8"&gt;previous article&lt;/a&gt; published on October 2, 2019.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="team troubleshooting"></category><category term="agile"></category><category term="team delivery"></category><category term="process debugging"></category><category term="burndown"></category></entry><entry><title>Debugging the Delivery of a Team (1/4)</title><link href="https://something.to-rea.de/debugging-the-delivery-of-a-team-14.html" rel="alternate"></link><published>2020-02-25T00:00:00+00:00</published><updated>2020-02-25T00:00:00+00:00</updated><author><name>Cristiano Balducci</name></author><id>tag:something.to-rea.de,2020-02-25:/debugging-the-delivery-of-a-team-14.html</id><summary type="html">&lt;p&gt;First article in the Team Troubleshooting serie. Where we set the scene for the following blogs.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Debugging the Delivery of a Team (1/4)&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;An articles series on troubleshooting a team struggling to ship.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Falling in line&lt;/h2&gt;
&lt;p&gt;Starting as a manager in a new team is a multi faced challenge. You need to understand many things, how to interact with the team members, what the team norms are, what their technical context here and many more. When talking about a small software team,&lt;/p&gt;
&lt;p&gt;I feel that the most important one is &lt;em&gt;getting in the team's cadence&lt;/em&gt;. By this I mean to get in the same rhythm of analysing/producing/shipping working software products, to look at work using the same time horizon.
This allows you to frame milestones, challenges and problems in the right way. A team that ships weekly has a different outlook on future work than one that ships monthly!&lt;/p&gt;
&lt;p&gt;Sometimes what happens is that you join a team where the cadence is just not there. You have all the ceremonies at the right time, you have iterations of constant length but the rhythm of delivery escapes you. It is because you are not &lt;em&gt;regularly shipping working software&lt;/em&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This was exactly the situation me and my new team faced some months ago. A team set up in a quite normal way: some software engineers, a manager and a Product Owner, working using Scrum with 1 week sprints. An average team: working hard but struggling to ship, pouring ourselves in our daily work and have nothing to show for it.&lt;/p&gt;
&lt;p&gt;And this is the story of how we troubleshoot the problem and, step by step, seen through the lens of burndown charts. The story of how we went from this&lt;/p&gt;
&lt;p&gt;&lt;img alt="Burndown Chart" src="https://something.to-rea.de/images/burndown1.png"&gt;&lt;/p&gt;
&lt;p&gt;to this&lt;/p&gt;
&lt;p&gt;&lt;img alt="Burndown Chart" src="https://something.to-rea.de/images/burndown2.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;In the next post we will see what was causing the flat line pattern that you see in the first image. Spoiler: it is not what you think it is ;)&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Disclaimer&lt;/h4&gt;
&lt;p&gt;I know that burndown charts have a bad reputation and I don't want to suggest that they are the be-all end-all of team efficiency. I do think they are a useful metric that can be used to explore how much a team is able to focus and understands its own capacity.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This conotent is based on a &lt;a href="https://medium.com/@SkyscannerEng/dont-burn-out-burn-down-how-we-learned-to-sprint-on-shifting-sands-a67341c34fa8"&gt;previous article&lt;/a&gt; published on October 2, 2019.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="team troubleshooting"></category><category term="agile"></category><category term="team delivery"></category><category term="process debugging"></category><category term="burndown"></category></entry></feed>